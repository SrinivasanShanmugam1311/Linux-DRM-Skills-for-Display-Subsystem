
1. Understanding Linux DRM:
https://blog.csdn.net/xiaoqiaoq0/article/details/113885473?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-9.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-9.pc_relevant_default

2. Linux drm architecture:
https://blog.csdn.net/walletiger/article/details/46289619?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_antiscan&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_antiscan

3. The principle and application of linux drm (VERY IMPORTANT):
https://blog.csdn.net/user_jiang/article/details/105178965?spm=1001.2101.3001.6650.11&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-11.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-11.pc_relevant_default

module behavior
Taking the process displayed by HDMI Monitor as an example, the behavior of CRTC / Encoder / Connector under the example analysis

1. First, the HDMI driver detects the Plugin signal of the TV, reads the EDID signal of the TV, and obtains the resolution information of the TV (DRM Connector)
2. Userspace fills the framebuffer with the data to be displayed, and then informs the VOP device to start displaying through the libdrm interface
3. Then the VOP (what is meany by VOP? -> https://lwn.net/Articles/615310/ - The basic "crtc" for rockchip is a "VOP" - Video Output Processor.
the vop devices found on Rockchip rk3288 Soc, rk3288 soc have two similar
Vop devices. Vop devices support iommu mapping, we use dma-mapping API with
ARM_DMA_USE_IOMMU.)  driver converts the data in the framebuffer into standard LCDC Timing timing (DRM CRTC)
4. At the same time, the HDMI driver aligns the LCDC timing configuration of the HDMI hardware module with the VOP output timing, and prepares to convert the input LCDC Timing into the HDMI TMDS signal (DRM Encoder) recognized by the TV.

4. Basic concepts and usage examples of Linux DRM (C language) (VERY IMPORTANT):
https://blog.csdn.net/weixin_40026797/article/details/111058814?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default

5. [RK3399][Android7.1] DRM module introduction in Display (VERY IMPORTANT):
https://blog.csdn.net/kris_fei/article/details/79046380?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8.pc_relevant_default	

6. Linux DRM (three) RK platform DRM code analysis- Rockchip
https://blog.csdn.net/u014674293/article/details/105774238?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-10.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-10.pc_relevant_default

7. Code analysis of linux drm architecture
https://blog.csdn.net/walletiger/article/details/46596399?spm=1001.2101.3001.6650.14&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-14.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-14.pc_relevant_default
